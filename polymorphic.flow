import stackUtils;
import arExp;

export {
    RpnPolE<?> ::= RpnPolOp<?>, RpnPolArg<?>;
    RpnPolArg : (val: ?);
    RpnPolOp : (op: string, fn: (?, ?) -> ?);

    ae2rpni(a: ArExp) -> List<RpnPolE<int>>;
    rpni2rpnae(r : List<RpnPolE<int>>) -> List<RpnPolE<ArExp>>;
    rpni2s(r: List<RpnPolE<int>>) -> string;
    evalRpn(r : List<RpnPolE<?>>) -> Maybe<?>;

    rpnPolTesting(arexp : ArExp) -> void;
}

ae2rpni(e:ArExp)-> List<RpnPolE<int>>{
    switch (e : ArExp) {
        ArSum(l,r): { 
            list1 = concatList(ae2rpni(l),ae2rpni(r));
            list2 = makeList1(RpnPolOp("+", \x, y -> x + y));
            concatList(list1, list2);
        }
        ArRes(l,r): { 
            list1 = concatList(ae2rpni(l),ae2rpni(r));
            list2 = makeList1(RpnPolOp("-", \x, y -> x - y));
            concatList(list1, list2);
        }
        ArProd(l,r): {
            list1 = concatList(ae2rpni(l),ae2rpni(r));
            list2 = makeList1(RpnPolOp("*", \x, y -> x * y));
            concatList(list1, list2);
        }
        ArDiv(l,r): {
            list1 = concatList(ae2rpni(l),ae2rpni(r));
            list2 = makeList1(RpnPolOp("/", \x, y -> x / y));
            concatList(list1, list2);
        }
        ArInt(v): { 
            Cons(RpnPolArg(v), EmptyList());
        }   
    }
}

rpni2rpnae(r : List<RpnPolE<int>>) -> List<RpnPolE<ArExp>>{
    mapList(r, \ e -> switch (e : RpnPolE<int>) {
        RpnPolArg(v) : RpnPolArg(ArInt(v));
        RpnPolOp(op, fn) : {
            if(op == "+") { 
                RpnPolOp(op, \a, b -> ArSum(a,b)) 
            } else {
                if(op == "-") { 
                    RpnPolOp(op, \a, b -> ArRes(a,b)) 
                } else {
                    if(op == "*") { 
                        RpnPolOp(op, \a, b -> ArProd(a,b)) 
                    } else {
                        RpnPolOp(op, \a, b -> ArDiv(a,b)) 
                    }
                }
            }            
        }
    })
}

rpni2s(l: List<RpnPolE<int>>) -> string{
    switch (l:List<RpnPolE<int>>) {
		EmptyList(): {""};
		Cons(h, t): {
			switch (h : RpnPolE<int>) {
                RpnPolArg(val): { i2s(val)+rpni2s(t);}
                RpnPolOp(op,fn): { op+rpni2s(t);}
            }
		}
	}
}

evalRpn(rpnList:List<RpnPolE<?>>)-> Maybe<?>{
    popStack(
        foldList(rpnList, makeStack(), \s, e -> 
        switch (e: RpnPolE) {
            RpnPolArg(v) : pushStack(s, v);
            RpnPolOp(op, fn) : {
                pop1 = popStack(s);
                pop2 = popStack(pop1.stack);
                eitherFn2(
                    pop1.value, 
                    pop2.value, 
                    \a,b -> pushStack(pop2.stack, fn(b,a)),
                    \a -> makeStack(),
                    makeStack
                    );
            }
        })
    ).value;
}

rpnPolTesting(arexp : ArExp) -> void{
    rpni = ae2rpni(arexp);
    println("rpni2s: " + rpni2s(rpni));
    println("evalRpn int " + toString(either(evalRpn(rpni),-1)));
    rpnae = rpni2rpnae(rpni);
    println("evalRpn ArExp " + toString(either(evalRpn(rpnae),ArInt(-1))));
}
